{
	"name": "df_mod7_simple_dataprocessing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_mod7_orders",
						"type": "DatasetReference"
					},
					"name": "orders"
				},
				{
					"dataset": {
						"referenceName": "ds_bob_mod7_orderitems",
						"type": "DatasetReference"
					},
					"name": "orderItems"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_gen2Mod7_highorders",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_gen2mod7_LowOrders",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_gen2mod7_errors",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "aggregateTotalByOrderid"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "orderValue"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_id as string,",
				"          order_date as string,",
				"          order_customer_id as string,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orders",
				"source(output(",
				"          order_item_id as string,",
				"          order_item_order_id as string,",
				"          order_item_product_id as string,",
				"          order_item_quantity as integer,",
				"          order_item_subtotal as double,",
				"          order_item_product_price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderItems",
				"orderItems aggregate(groupBy(order_item_order_id),",
				"     order_item_subtotal = sum(order_item_subtotal)) ~> aggregateTotalByOrderid",
				"orders, aggregateTotalByOrderid join(order_id == order_item_order_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          order_id,",
				"          order_date,",
				"          order_customer_id,",
				"          order_status,",
				"          total_amout = order_item_subtotal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(total_amout>500,",
				"     total_amout<=500,",
				"     disjoint: false) ~> orderValue@(highValue, lowValue, Error)",
				"orderValue@highValue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"orderValue@lowValue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"orderValue@Error sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}