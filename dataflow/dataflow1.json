{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_customer_sqldb",
						"type": "DatasetReference"
					},
					"name": "IcCustomerfromSqlDB"
				},
				{
					"dataset": {
						"referenceName": "ds_gen2_orders",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filterbyCity"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as string,",
				"          customer_email as string,",
				"          customer_password as string,",
				"          customer_fname as string,",
				"          customer_lname as string,",
				"          customer_street as string,",
				"          customer_city as string,",
				"          customer_state as string,",
				"          customer_zipcode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> IcCustomerfromSqlDB",
				"source(output(",
				"          order_id as string,",
				"          order_date as string,",
				"          order_customer_id as string,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"IcCustomerfromSqlDB filter(customer_city=='Caguas') ~> filterbyCity",
				"filterbyCity, source1 join(customer_id == order_customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          customer_id,",
				"          customer_email,",
				"          customer_password,",
				"          customer_fname,",
				"          customer_lname,",
				"          customer_street,",
				"          customer_city,",
				"          customer_state,",
				"          customer_zipcode,",
				"          order_id,",
				"          order_date,",
				"          order_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(asc(customer_id, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}